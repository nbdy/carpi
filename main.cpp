#include <QGuiApplication>
#include <QQmlApplicationEngine>
#include <QQuickStyle>

#include <osmscout/OSMScoutQt.h>

#include <disqt/disqt.h>
#include <rsettingsqt/rsettingsqt.h>

#include "libs/Utils/Utils.h"

// todo check for redis service with libsystemd-qt and start it if necessary

QJsonDocument loadConfig(const QString& fn){
    QFile f(fn);
    QString data;
    if(f.open(QIODevice::ReadOnly)) data = f.readAll();
    return QJsonDocument::fromJson(data.toUtf8());
}

QStringList listDirectory(const QString& dir){
    QStringList r;
    QDir d(dir);
    for(const auto& e : d.entryList(QDir::Filter::Dirs)) r << e;
    return r;
}

template<typename R> void setValue(QCommandLineParser &p, const QString& key, QJsonObject &o, R defaultValue){
    if(p.isSet(key)) o.insert(key, p.value(key));
    else o.insert(key, defaultValue);
}


QJsonDocument parseArguments(QGuiApplication &app){
    QCommandLineParser clip;
    clip.setApplicationDescription("carpi");
    clip.addHelpOption();
    clip.addVersionOption();

    clip.addOptions({
        {{"c", "config"}, QCoreApplication::translate("main", "json configuration file (overrides cli parameters)")},
        {{"g", "gps"}, QCoreApplication::translate("main", "Enable GPS")},
        {{"w", "wifi"}, QCoreApplication::translate("main", "Enable WiFi")},
        {{"b", "bluetooth"}, QCoreApplication::translate("main", "Enable Bluetooth")},
        {{"m", "maps"}, QCoreApplication::translate("main", "folder to maps generated by libosmscout's Import tool")},
        {{"s", "style"}, QCoreApplication::translate("main", "application style")},
        {"stylesheet", QCoreApplication::translate("main", "stylesheet for map")},
        {"stylesheet-directory", QCoreApplication::translate("main", "folder with osm stylesheets")},
        {"cache-directory", QCoreApplication::translate("main", "caching directory")}
    });

    clip.process(app);

    QJsonDocument cfg;
    if(clip.isSet("config")) cfg = loadConfig(clip.value("config"));
    else {
        QJsonObject o;
        setValue(clip, "gps", o, clip.isSet("gps"));
        setValue(clip, "wifi", o, clip.isSet("wifi"));
        setValue(clip, "bluetooth", o, clip.isSet("bluetooth"));
        setValue(clip, "navigation", o, clip.isSet("maps"));
        setValue(clip, "maps", o, "");
        setValue(clip, "style", o, "Material");
        setValue(clip, "stylesheet", o, "/usr/local/share/stylesheets/standard.oss");
        setValue(clip, "stylesheet-directory", o, "/usr/share/local/stylesheets/");
        setValue(clip, "cache-directory", o, "/var/lib/carpi/cache");

        cfg.setObject(o);
    }
    return cfg;
}

int main(int argc, char **argv)
{
    qputenv("QT_IM_MODULE", QByteArray("qtvirtualkeyboard"));

    RedisQT::registerType();
    RSettingsQT::registerType();
    Utils::registerTypes();

    osmscout::OSMScoutQt::RegisterQmlTypes("io.eberlein.carpi.map");

    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);

    QGuiApplication app(argc, argv);
    QGuiApplication::setOrganizationName("eberlein");
    QGuiApplication::setOrganizationDomain("eberlein.io");
    QGuiApplication::setApplicationName("carpi");

    QJsonDocument cfg = parseArguments(app);

    QQuickStyle::setStyle(cfg["style"].toString());

    if(cfg["navigation"].toBool()) {
        bool si = osmscout::OSMScoutQt::NewInstance()
                .WithCacheLocation(cfg["cache-directory"].toString())
                .WithStyleSheetFile(cfg["stylesheet"].toString())
                .WithStyleSheetDirectory(cfg["stylesheet-directory"].toString())
                .WithMapLookupDirectories(listDirectory(cfg["maps"].toString()))
                .Init();

        if (!si) return -1;
    }

    QQmlApplicationEngine engine;
    const QUrl url("qrc:/qml/main.qml");
    QObject::connect(&engine, &QQmlApplicationEngine::objectCreated,
                     &app, [url](QObject *obj, const QUrl &objUrl) {
        if (!obj && url == objUrl)
            QCoreApplication::exit(-1);
    }, Qt::QueuedConnection);
    engine.load(url);

    int rc = QGuiApplication::exec();
    osmscout::OSMScoutQt::FreeInstance();
    return rc;
}
